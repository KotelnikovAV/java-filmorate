SET REFERENTIAL_INTEGRITY TRUE;

DROP TABLE IF EXISTS films_like;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS adding_friends;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS mpa;
DROP TABLE IF EXISTS directors;
DROP TABLE IF EXISTS users_events_table;
DROP TABLE IF EXISTS users_events;
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar NOT NULL,
    login varchar NOT NULL,
    name varchar,
    birthday date NOT NULL,
    CONSTRAINT uq_email UNIQUE(email),
    CONSTRAINT uq_login UNIQUE(login)
);

CREATE TABLE IF NOT EXISTS mpa (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS directors (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    name varchar NOT NULL,
    description varchar(200),
    releaseDate date NOT NULL,
    duration INTEGER NOT NULL,
    genre varchar NOT NULL,
    mpa_id INTEGER REFERENCES mpa (id),
    directors varchar,
    CONSTRAINT duration_positive CHECK (duration > 0)
);

CREATE TABLE IF NOT EXISTS films_like (
    film_id INTEGER,
    user_id INTEGER,
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS adding_friends (
    outgoing_request_user_id INTEGER REFERENCES users (id),
    incoming_request_user_id INTEGER REFERENCES users (id),
    confirmation BIT
);

CREATE TABLE IF NOT EXISTS genre (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS users_events (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    user_id INTEGER NOT NULL ,
    event_type varchar NOT NULL,
    operation varchar NOT NULL,
    entity_id INTEGER NOT NULL,
    timestamp TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS users_events_table (
    user_id INTEGER,
    user_events_id INTEGER,
    FOREIGN KEY (user_events_id) REFERENCES users_events (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);